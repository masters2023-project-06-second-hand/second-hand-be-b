# 워크플로우의 이름을 정의합니다. 이 이름은 GitHub Actions 탭에서 표시됩니다.
name: fe server

# 워크플로우 실행의 트리거 조건을 정의합니다.
on:
  # 'fe' 브랜치에 push 이벤트가 발생할 때 워크플로우를 실행합니다.
  push:
    branches:
      - fe
  # 워크플로우를 수동으로 실행할 수 있는 옵션을 제공합니다.
  # GitHub 웹 인터페이스에서 "Run workflow" 버튼을 통해 실행할 수 있습니다.
  workflow_dispatch:

# 워크플로우에서 실행될 작업들을 정의합니다.
jobs:
  # 'build'라는 이름의 작업을 정의합니다.
  build:
    # 이 작업은 GitHub-hosted runner의 'ubuntu-latest' 환경에서 실행됩니다.
    runs-on: ubuntu-latest

    # 작업에서 실행될 순차적인 단계를 정의합니다.
    steps:
      # 소스 코드를 runner에 체크아웃합니다.
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      # Node.js를 설치합니다.
      - name: Node.js 설치
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Env 적용
        run: |
          echo "${{ secrets.FE_ENV }}" | base64 --decode > fe/.env

      # 프로젝트의 의존성을 설치합니다.
      - name: 의존성 설치경
        run: |
          cd fe
          npm install

      # React 애플리케이션을 빌드합니다.
      - name: React 애플리케이션 빌드
        run:
          |
          cd fe
          npm run build

      # QEMU를 설정합니다. 멀티 아키텍처 빌드를 지원하기 위한 것입니다.
      - name: QEMU 설정
        uses: docker/setup-qemu-action@v2

      # Docker Buildx를 설정합니다.
      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v2

      # Docker Hub에 로그인합니다.
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker 이미지를 빌드하고 Docker Hub에 푸시합니다.
      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.fe
          push: true
          tags: ${{ secrets.FE_IMG_TAG }}

      # 이미지를 EC2 인스턴스에 배포합니다.
      - name: EC2에 Deploy
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          IMAGE_NAME: fe
          TAG: ${{ secrets.FE_IMG_TAG }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST "
            sudo docker pull $TAG
          
            sudo docker stop fe
            sudo docker rm fe
            sudo docker run -d --name fe --network=secondhand $TAG
          "
