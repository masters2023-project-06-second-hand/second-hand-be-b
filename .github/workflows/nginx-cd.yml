# 워크플로우의 이름을 지정합니다.
name: nginx server

# 워크플로우의 실행 트리거를 지정합니다.
on:
  push:
    branches:
      - nginx  # 'nginx' 브랜치에 푸시될 때 실행합니다.
  workflow_dispatch:  # 워크플로우 수동 실행 옵션을 활성화합니다.

# 실행할 작업들을 정의합니다.
jobs:
  build:
    runs-on: ubuntu-latest  # 'ubuntu-latest' 환경에서 실행합니다.

    steps:
      # 저장소 코드를 체크아웃합니다.
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      # QEMU 에뮬레이터를 설정합니다.
      - name: QEMU 설정
        uses: docker/setup-qemu-action@v2

      # Docker의 Buildx 기능을 설정합니다.
      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v2

      # Docker Hub에 로그인합니다.
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker 이미지를 빌드하고 Docker Hub에 푸시합니다.
      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.nginx
          push: true
          tags: ${{ secrets.NGINX_IMG_TAG }}

      # EC2 인스턴스에 배포를 진행합니다.
      - name: EC2에 Deploy
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          CONTAINER_NAME: nginx
          TAG: ${{ secrets.NGINX_IMG_TAG }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST "
            sudo docker pull $TAG &&
            sudo docker stop $CONTAINER_NAME && sudo docker rm $CONTAINER_NAME &&
            sudo docker run -d --name $CONTAINER_NAME --network=secondhand -p 80:80 $TAG
          "
